类加载机制概述
虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机
直接使用的Java类型，这就是虚拟机的类加载机制。
懒加载策略

类加载时机
加载->连接（验证->准备->解析）->初始化->使用->卸载
加载：
通过一个类的全限定名来获取定义此类的二进制流；
将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构；
在内存中生成一个代表这个类的Class对象，作为这个类的各种数据的访问入口；
验证：
是连接的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合
当前虚拟机的要求，并且不会危害虚拟机自身的安全；
文件格式验证；
元数据验证；
字节码验证；
符号引用校验；
准备：
准备阶段正式为类变量分配内存并设置变量的初始值。这些变量使用的内存都将在方法区中进行分配；
这里的初始值并非我们指定的值，而是其默认值；
解析：
解析阶段是虚拟机将常量池中的符号引用替换为直接引用的过程。
类或者接口的解析；
字段解析；
类方法解析；
接口方法解析；
初始化（Demo.java）：
初始化是类加载的最后一步；
初始化是执行<clinit>方法的过程；

运行时栈帧结构：
局部变量表
操作数栈
动态链接
方法返回地址
附加信息

方法调用-解析：
方法调用并不等同于方法的执行，方法调用阶段的唯一任务就是确定被调用方法的版本。
封装，继承，多态
静态方法，构造器方法，私有方法，final修饰的方法

方法调用-静态分派调用
静态分派（重载）
静态单分派，静态多分派

方法调用-动态分派调用
动态分派（重写）
动态单分派，动态多分派
